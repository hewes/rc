snippet def
abbr define method
prev_word   '^'
    def ${1:method}(${2})${3: : ${4:Unit}} = {
      ${5}
    }

snippet class
abbr scala normal class
prev_word   '^'
    class ${1:ClassName} {
      ${2}
    }

snippet cclass
abbr scala case class
prev_word   '^'
    case class ${1:ClassName} {
                  ${2}
                }

snippet trait
abbr scala trait
prev_word   '^'
    trait ${1:TraitName} {
      ${2}
    }

snippet object
abbr singleton object
prev_word   '^'
    object ${1:ObjectName} {
      ${2}
    }

snippet application
abbr application trait
prev_word   '^'
  object ${1:ObjectName} extends Application {
    ${2}
  }

snippet type
abbr defines a type (e.g. structural)
prev_word   '^'
  type ${1} = {${2}}

snippet if
abbr if conditional
prev_word   '^'
  if (${1:condition}) {
    ${2:// expression}
  }
  
snippet ifelse
abbr if else
prev_word   '^'
  if (${1:condition}) {
    ${2:// expression}
  } else {
  
  }
snippet while
abbr while
prev_word   '^'
  while (${1:condition}) {
    ${2:// expression}
  }
snippet try
abbr trye catch
prev_word   '^'
  try {
    ${2:// expression}
  }
  catch {
    case e : ${1:Exception} => ${3:// expression}
  }

snippet trycatchfinally
abbr try..catch..finally
prev_word   '^'
  try {
    ${2:// expression}
  }
  catch {
    case e : ${1:Exception} => ${3:// expression}
  }
  finally {
    ${4:// expression}
  }

snippet pr
abbr private
prev_word   '^'
  private


snippet pri
abbr scoped private
prev_word   '^'
  private[${1:this}]

snippet pro
abbr protected
prev_word   '^'
  protected

snippet prop
abbr scoped protected
prev_word   '^'
  protected[${1:this}]

snippet for
abbr for
prev_word   '^'
  for (${1} <- ${2}) {
    ${3}
  }

snippet foreach
abbr foreach
prev_word   '^'
  foreach {${1} =>
    ${2}
  }
snippet match
abbr match
prev_word   '^'
  match {
    case ${1} => ${2}
  }
  
snippet case
abbr case
prev_word   '^'
  case ${1} => ${2}

snippet print
abbr print string
prev_word   '^'
  println(${1})

snippet arg1
abbr specifies arguments - x1
prev_word   '^'
  (${1:first}: ${2:Type})

snippet arg2
abbr specifies arguments - x2
prev_word   '^'
  (${1:first}: ${2:Type}, ${3:second}: ${4:Type})

snippet arg3
prev_word   '^'
abbr specifies arguments - x3
  (${1:first}: ${2:Type}, ${3:second}: ${4:Type}, ${5:third}: ${6:Type})

snippet main
prev_word   '^'
abbr main method
  def main(args: Array[String]){
    ${1}
  }

