[[plugins]]
repo = 'Shougo/dein.vim'

# Unite {{{
[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['vimproc']
hook_add='''
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1
  let g:unite_enable_start_insert = 1
  let g:unite_enable_split_vertically  =  0
  let g:unite_source_file_mru_limit  =  300
  let g:unite_source_file_rec_min_cache_files = 300
  let g:unite_source_file_rec_max_depth = 10
  let g:unite_kind_openable_cd_command = 'TabpageCD'
  let g:unite_kind_openable_lcd_command = 'TabpageCD'
  let g:unite_winheight = 20
  let g:unite_source_history_yank_enable = 1
  let g:unite_source_bookmark_directory = $HOME . "/.unite/bookmark"

  nnoremap ff f
  nmap f [unite]
  xmap f [unite]
  nnoremap [unite] <Nop>
  xnoremap [unite] <Nop>
  nnoremap <silent> [unite]u :Unite -buffer-name=files file<CR>
  nnoremap <silent> [unite]m :Unite -buffer-name=file file_mru<CR>
  nnoremap <silent> [unite]r :UniteResume<CR>
  nnoremap [unite]R :Unite ref/
  nnoremap <silent> [unite]b :UniteWithBufferDir file file/new<CR>
  nnoremap <silent> [unite]c :Unite -buffer-name=files file file/new<CR>
  nnoremap <silent> [unite]n :Unite -buffer-name=files gtags/path file/new<CR>
  nnoremap <silent> [unite]t :Unite tab<CR>
  nnoremap <silent> [unite]y :Unite register<CR>
  nnoremap <silent> [unite]a :UniteBookmarkAdd<CR>
  nnoremap <silent> [unite]p :Unite bookmark -default-action=cd -no-start-insert<CR>
  nnoremap <silent> <expr> [unite]h ':UniteWithInput -buffer-name=files file file/new -input='. substitute($HOME, '\' ,'/', 'g') .'/<CR>'
  nnoremap <silent> [unite]H :<C-u>Unite history/yank<CR>
  nnoremap <silent> [unite]j :Unite buffer_tab -no-start-insert<CR>
  nnoremap <silent> [unite]l :Unite -auto-preview line<CR>
  nnoremap <expr> [unite]g ':Unite grep:'. expand("%:h") . ':-r'
  nnoremap <silent> [unite]* :UniteWithCursorWord line<CR>
  nnoremap <silent> [unite]o :Unite -buffer-name=outline outline<CR>
  nnoremap <silent> [unite]q :Unite quickfix -no-start-insert<CR>
  nnoremap [unite]s<SPACE> :Unite svn/
  nnoremap <C-j> :Unite gtags/context<CR>
  autocmd MyAutoCmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()"{{{
    nnoremap <silent><buffer> <C-o> :call unite#mappings#do_action('tabopen')<CR>
    nnoremap <silent><buffer> <C-v> :call unite#mappings#do_action('vsplit')<CR>
    nnoremap <silent><buffer> <C-s> :call unite#mappings#do_action('split')<CR>
    nnoremap <silent><buffer> <C-r> :call unite#mappings#do_action('rec')<CR>
    nnoremap <silent><buffer> <C-f> :call unite#mappings#do_action('preview')<CR>
    inoremap <silent><buffer> <C-o> <Esc>:call unite#mappings#do_action('tabopen')<CR>
    inoremap <silent><buffer> <C-v> <Esc>:call unite#mappings#do_action('vsplit')<CR>
    inoremap <silent><buffer> <C-s> <Esc>:call unite#mappings#do_action('split')<CR>
    inoremap <silent><buffer> <C-r> <Esc>:call unite#mappings#do_action('rec')<CR>
    inoremap <silent><buffer> <C-e> <Esc>:call unite#mappings#do_action('edit')<CR>
    inoremap <silent><buffer> <C-f> <C-o>:call unite#mappings#do_action('preview')<CR>
    " I hope to use <C-o> and return to the selected item after action...
    inoremap <silent><buffer> <C-j> <ESC>:quit<CR>
    nmap <silent><buffer> <C-j> <Plug>(unite_all_exit)
    inoremap <silent><buffer> <SPACE> _
    inoremap <silent><buffer> _ <SPACE>
  endfunction "}}}

  nnoremap [unite]<SPACE> :Unite local<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/unite-outline.git'
on_source= ['unite.vim']
depends = ['unite.vim']

[[plugins]]
repo = 'hewes/unite-gtags.git'
on_source= ['unite.vim']
depends = ['unite.vim']
hook_add='''
  let g:unite_source_gtags_project_config = {
        \ '_': { 'treelize': 0, 'absolute_path': 0},
        \ }
'''

# }}}
# Complete {{{
[[plugins]]
repo = 'Shougo/tabpagebuffer.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
hook_post_source='''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#auto_completion_start_length = 2
  let g:neocomplete#min_keyword_length = 2

  let g:neocomplete#enable_auto_select = 0

  " TODO: after patch for completeopt noinsert option
  let g:neocomplete#enable_complete_select = 0
  "let g:neocomplete#enable_complete_select = 1
  let g:neocomplete#enable_refresh_always = 0
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#enable_fuzzy_completion = 1
  let g:neocomplete#enable_auto_delimiter = 1

  let g:neocomplete#enable_auto_close_preview = 1

  " sources setting

  " omni source
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  end
  let g:neocomplete#sources#omni#input_patterns = {}
  let g:neocomplete#sources#omni#functions = {}

  " vim source
  if !exists('g:neocomplete#sources#vim#complete_functions')
    let g:neocomplete#sources#vim#complete_functions = {}
  endif
  let g:neocomplete#sources#vim#complete_functions.Ref = 'ref#complete'
  let g:neocomplete#sources#vim#complete_functions.Unite = 'untie#complete_source'

  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif

  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  end
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  let g:neocomplete#sources#syntax#min_keyword_length = 2

  " keymappings
  let g:neocomplete#text_mode_filetypes = {
        \ 'txt' :1,
        \ 'md' :1,
        \ }

  " Define dictionary.
  let g:neocomplete#sources#dictionary#min_keyword_length = 2
  let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'ruby' : $HOME.'/.vim/dict/ruby.dict',
        \ 'java' : $HOME.'/.vim/dict/java.dict',
        \ }
  call neocomplete#custom#source('include', 'disabled_filetypes', {'_' : 1})
  call neocomplete#custom#source('tag', 'disabled_filetypes', {'vim' : 1})
  call neocomplete#custom#source('_', 'converters', ['converter_delimiter', 'converter_abbr'])
  inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() . "\<Space>"  : "\<Space>"
  inoremap <expr><C-h> neocomplete#smart_close_popup() . "\<C-h>"
'''

[[plugins]]
repo = 'Shougo/neocomplcache'
if = '!has("lua")'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add='''
  " expand snippets by TAB
  imap <silent> <expr> <Tab> <SID>tab_wrapper()
  function! s:tab_wrapper()
    if neosnippet#expandable_or_jumpable()
      return "\<Plug>(neosnippet_expand_or_jump)"
    endif
    return "\<Plug>(skip_position)""
  endfunction
  let g:neosnippet#snippets_directory = $HOME. '/.vim/snippets'
'''
# }}}
# eskk {{{
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'kana/vim-smartchr'
hook_source='''
  inoremap <expr> , smartchr#one_of(', ', ',')
  inoremap <expr> ? smartchr#one_of('?', '? ')

  " Smart =.
  inoremap <expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
        \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
        \ : smartchr#one_of(' = ', '=', ' == ',  '=')
  augroup MyAutoCmd
    autocmd FileType c,cpp inoremap <buffer> <expr> . smartchr#loop('.', '->', '...')
    autocmd FileType perl,php inoremap <buffer> <expr> . smartchr#loop(' . ', '->', '.')
    autocmd FileType perl,php inoremap <buffer> <expr> - smartchr#loop('-', '->')
    autocmd FileType vim inoremap <buffer> <expr> . smartchr#loop('.', ' . ', '..', '...')

    autocmd FileType haskell,int-ghci
          \ inoremap <buffer> <expr> + smartchr#loop('+', ' ++ ')
          \| inoremap <buffer> <expr> - smartchr#loop('-', ' -> ', ' <- ')
          \| inoremap <buffer> <expr> $ smartchr#loop(' $ ', '$')
          \| inoremap <buffer> <expr> \ smartchr#loop('\ ', '\')
          \| inoremap <buffer> <expr> : smartchr#loop(':', ' :: ', ' : ')
          \| inoremap <buffer> <expr> . smartchr#loop('.', ' . ', '..')
    autocmd FileType sh,bash,vim,zsh
          \ inoremap = =
          \| inoremap , ,
    autocmd FileType scala
          \ inoremap <buffer> <expr> - smartchr#loop('-', ' -> ', ' <- ')
          \| inoremap <buffer> <expr> = smartchr#loop(' = ', '=', ' => ')
          \| inoremap <buffer> <expr> : smartchr#loop(': ', ':', ' :: ')
          \| inoremap <buffer> <expr> . smartchr#loop('.', ' => ')
    autocmd FileType eruby,yaml
          \ inoremap <buffer> <expr> > smartchr#loop('>', '%>')
          \| inoremap <buffer> <expr> < smartchr#loop('<', '<%', '<%=')
  augroup END
'''

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'tyru/eskk.vim'
on_i=1
hook_source='''
    if !exists('g:eskk#disable') || !g:eskk#disable
      let g:eskk#directory  =  "~/.vim/.eskk"
      "let g:eskk#dictionary  =  { 'path': "~/.vim/dict/skk.dict",  'sorted': 0,  'encoding': 'utf-8',  }
      " SKK-JISYO from http://openlab.jp/skk/dic/SKK-JISYO.L.gz
      let g:eskk#large_dictionary  =  { 'path': "~/SKK-JISYO.L",  'sorted': 1,  'encoding': 'euc-jp',  }
      let g:eskk#enable_completion = 1
      let g:eskk#start_completion_length = 2
      let g:eskk_map_normal_keys = 1
      let g:eskk#use_cursor_color = 1
      let g:eskk#show_annotation = 1
      let g:eskk#keep_state = 0
    endif
    imap <C-j> <Plug>(eskk:toggle)
'''
# }}}

[[plugins]]
repo = 'vim-scripts/DrawIt'
hook_source='''
      nnoremap  <Leader>di :DrawIt<CR>
      map  <Leader>ds <Plug>DrawItStop
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'tpope/vim-surround'
hook_source='''
      let g:surround_no_mappings = 1
      nmap ds  <Plug>Dsurround
      nmap cs  <Plug>Csurround
      nmap ys  <Plug>Ysurround
      nmap yS  <Plug>YSurround
      nmap yss <Plug>Yssurround
      nmap ySs <Plug>YSsurround
      nmap ySS <Plug>YSsurround
      xmap s   <Plug>VSurround
      xmap gs  <Plug>VgSurround
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'

# quickrun {{{
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add='''
    let g:quickrun_config = {}
'''
hook_source='''
      let g:quickrun_config._ = {'runner': "vimproc"}
      let g:quickrun_config["watchdogs_checker/_"]  = {
            \ "runner" : "vimproc",
            \ "outputter" : "quickfix",
            \ "hook/quickfix_status_enable/enable_exit" : 1,
            \ "hook/quickfixsigns_enable/enable_exit" : 1,
            \ "hook/qfixgrep_enable/enable_exit" : 1,
            \ 'runmode' : "async:remote:vimproc",
            \ "outputter/quickfix/open_cmd" : "",
            \ }
      " TODO: should consider class_path, and library on scala application
      let g:quickrun_config['watchdogs_checker/nop'] = {
            \ "command" : "echo",
            \ "exec"    : "%c nop",
            \}
      "let g:quickrun_config['scala/watchdogs_checker'] = {"type" : "watchdogs_checker/nop"}
      let g:watchdogs_check_BufWritePost_enables = {
            \ "scala" : 0
            \ }
      let s:pyflakes = executable('pyflakes3') ? 'pyflakes3' :
            \          executable('python3') ? 'python3' :
            \          executable('pyflakes') ? 'pyflakes' :
            \          'python'
      let s:cmdopt = executable('pyflakes3') ? '' :
            \          executable('python3') ? '-m pyflakes' :
            \          executable('pyflakes') ? '' :
            \          '-m pyflakes'
      let g:quickrun_config["watchdogs_checker/pyflakes3"] = {
            \ "command" : s:pyflakes,
            \ "cmdopt" : s:cmdopt,
            \ "exec"    : "%c %o %s:p",
            \ "errorformat" : '%f:%l:%m',
            \ }
      unlet s:pyflakes
      unlet s:cmdopt

'''
# }}} quickrun

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
on_source='vim-quickrun'
depends = ['vim-quickrun']
hook_add='''
      let g:watchdogs_check_BufWritePost_enable = 1
'''
hook_post_source='''
      call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = ['vim-airline']
on_source= ['vim-airline']

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_source='''
      nmap n <Plug>(anzu-n)
      nmap N <Plug>(anzu-N)
      nmap * <Plug>(anzu-star)
      nmap # <Plug>(anzu-sharp)
'''

[[plugins]]
repo = 'hewes/context-highlight.vim'

[[plugins]]
repo = 'tomtom/quickfixsigns_vim'
hook_source='''
  let g:quickfixsigns_sign_may_use_double=0
  let g:quickfixsigns_classes = ['qfl', 'loc', 'vcsdiff', 'breakpoints']
'''

[[plugins]]
repo = 'Shougo/vimproc'
build='make'

[[plugins]]
repo = 'kana/vim-altercmd'
hook_post_source='''
  call altercmd#load()
  AlterCommand cd TabpageCD
  command! -nargs=0 CD silent execute 'TabpageCD' unite#util#path2project_directory(expand('%:p'))
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'

[[plugins]]
repo = 'tpope/vim-repeat.git'

[[plugins]]
repo = 'cespare/vim-toml'

